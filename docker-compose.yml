services:
  # Nginx 리버스 프록시 (브로틀리 지원)
  nginx:
    image: nginx:alpine
    # 브로틀리 모듈이 포함된 이미지 사용
    # image: nginx:alpine-brotli
    container_name: nginx-proxy
    ports:
      - "${NGINX_PORT:-80}:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
      - ./ssl:/etc/nginx/ssl
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    networks:
      - backend-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email your-email@example.com --agree-tos --no-eff-email -d your-domain.com
    depends_on:
      - nginx

  backend:
    image: chlwoomin/ppikkappeonjjeog:latest
    container_name: backend
    ports:
      - "${BACKEND_PORT}:8000"
    env_file:
      - .env
    depends_on:
      - mysql
      - redis
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://34.22.93.83:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # MySQL 데이터베이스
  mysql:
    image: mysql:latest
    container_name: mysql
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis 캐시
  redis:
    image: redis:latest
    container_name: backend-redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s


  rabbitmq:
    image: rabbitmq:latest
    container_name: rabbitmq
    ports:
      - "${RABBITMQ_PORT}:5672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      start_period: 10s

  celery:
    image: chlwoomin/ppikkappeonjjeog:latest
    container_name: celery
    command: celery -A config.celery.app worker --loglevel=info
    networks:
      - backend-network
    depends_on:
      - rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "inspect", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s


# 프로메테우스 메트릭 수집

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "${PROMETHEUS_PORT}:9090"
    networks:
      - backend-network
    
# cadvisor
  cadvisor:
    image: bitnami/cadvisor:latest
    container_name: cadvisor
    ports:
      - "${CADVISOR_PORT}:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    restart: always
    networks:
      - backend-network



# 그라파나 메트릭 시각화
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "${GRAFANA_PORT}:3000"
    depends_on:
      - prometheus
    networks:
      - backend-network

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "${LOKI_PORT}:3100"
    volumes:
      - ./loki-config.yml:/etc/loki/loki-config.yml
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - backend-network


  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - ./logs:/var/log
      - ./promtail-config.yml:/etc/promtail/promtail.yml
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/promtail.yml
    depends_on:
      - loki
    networks:
      - backend-network

networks:
  backend-network:
    driver: bridge

volumes:
  mysql_data:
  redis_data:
  rabbitmq_data: