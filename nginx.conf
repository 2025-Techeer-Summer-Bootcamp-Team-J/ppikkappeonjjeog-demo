# Nginx 워커 프로세스의 동작을 제어하는 전역 설정
events {
    # 워커 프로세스당 최대 동시 연결 수
    worker_connections 1024;
}

# HTTP 서버 및 프록시 관련 설정
http {
    # 1. 기본 설정 ==========================================================
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;


    # # 2. 로그 설정 ==========================================================
    log_format logger-json escape=json '{"source": "nginx", "time": $msec, "resp_body_size": $body_bytes_sent, "host": "$http_host", "remote_user": "$remote_user", "address": "$remote_addr", "request_length": $request_length, "method": "$request_method", "uri": "$request_uri", "status": $status, "user_agent": "$http_user_agent", "resp_time": $request_time, "upstream_addr": "$upstream_addr"}';
# 로그 분석 하기 쉽게 로그를 json형식으로 수정 
# 참고: https://docs.nginx.com/nginx/admin-guide/monitoring/logging/

    access_log /dev/stdout logger-json;
    error_log /dev/stderr logger-json;

    # 3. 성능 최적화 ========================================================
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;

    # 4. Gzip 압축 설정 (개발 중에도 유용할 수 있어 유지) ========================
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        application/x-www-form-urlencoded;

    # 5. 프록시 캐시 경로 설정 (개발 환경에서는 비활성화) =======================
    # proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:10m max_size=10g inactive=60m use_temp_path=off;

    # 6. 기타 설정 ==========================================================
    client_max_body_size 100M;

    # 7. 업스트림(백엔드 서버) 그룹 정의 ======================================
    upstream backend {
        # Docker 환경에서는 서비스 이름 사용
        server backend:8000;
    }

    # 8. 메인 서버 블록 (개발용) ==============================================
    server {
        # 80번 포트에서 수신
        listen 80;
        
        server_name api.ppikkappeonjjeog.life;

        # 9. 보안 헤더 설정 ==================================================
        # XSS 공격 방지
        add_header X-XSS-Protection "1; mode=block" always;
        # MIME 타입 스니핑 방지
        add_header X-Content-Type-Options "nosniff" always;
        # 클릭재킹 방지
        add_header X-Frame-Options "SAMEORIGIN" always;
        # Referrer 정책 설정
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        # 엄격한 Content-Security-Policy 설정 (Swagger UI 지원)
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net; img-src 'self' data: https://fastapi.tiangolo.com; font-src 'self'; connect-src 'self'; media-src 'self'; object-src 'none'; child-src 'none'; worker-src 'none'; frame-ancestors 'self'; form-action 'self'; upgrade-insecure-requests;" always;
        # HSTS (HTTPS Strict Transport Security) - HTTPS 환경에서만 활성화
        # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        # 권한 정책 설정
        add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), payment=(), usb=(), screen-wake-lock=(), web-share=(), xr-spatial-tracking=()" always;

        # SSL 인증서 발급을 위한 certbot 설정
        location /.well-known/acme-challenge/ {
            allow all;
            root /var/www/certbot;
        }

        # 헬스 체크 엔드포인트
        location /health {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            access_log off;
        }

        # HTTP를 HTTPS로 리다이렉트
        location / {
            return 301 https://$host$request_uri;
        }
    }
    server {
        listen 443 ssl;
        server_name api.ppikkappeonjjeog.life;

        ssl_certificate /etc/letsencrypt/live/api.ppikkappeonjjeog.life/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/api.ppikkappeonjjeog.life/privkey.pem;

        location / {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    server {
        listen 443 ssl;
        server_name grafana.ppikkappeonjjeog.life;

        ssl_certificate /etc/letsencrypt/live/api.ppikkappeonjjeog.life/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/api.ppikkappeonjjeog.life/privkey.pem;

        location / {
            proxy_pass http://grafana:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}